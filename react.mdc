---
description: 
globs: 
alwaysApply: false
---
# Reactアプリケーション ディレクトリ構造と開発ルール

## 目的

本ドキュメントは、今後Reactアプリケーションを大規模に開発していくにあたり、コードの可読性、保守性、スケーラビリティを向上させるためのディレクトリ構造と開発ルールを定めるものです。

## 基本原則

- **モジュール性**: 各ファイルやディレクトリは特定の機能や責務を持つ独立したモジュールとして扱う。
- **責務の分離**: UI、ロジック、状態管理など、異なる責務を持つコードは分離して配置する。
- **importの容易さ**: ファイル間の依存関係を分かりやすくし、importパスを簡潔に保つ。
- **一貫性**: プロジェクト全体で統一された構造と命名規則を用いる。

## 主要ディレクトリ構成 (`src` ディレクトリ以下)

```
src/
├── assets/       # 画像、フォントなどの静的ファイル
├── components/   # 再利用可能なUI部品
│   ├── common/   # アプリ全体で共通の汎用部品 (Button, Inputなど)
│   └── domain/   # 特定のドメインや機能に特化した部品
├── contexts/     # React Contextの定義
├── hooks/        # カスタムフック
├── pages/        # ルーティングされる各ページに対応するコンポーネント
│   ├── home/     # 例: ホームページ
│   │   ├── index.js      # ページコンポーネント本体
│   │   └── components/   # そのページ固有のコンポーネント
│   └── login/    # 例: ログイン関連ページ
│       ├── index.js
│       └── LoginCallbackPage.js # コールバックページなど
├── services/     # APIクライアント、外部サービス連携、ビジネスロジック
├── routes/       # ルーティング定義ファイル (任意)
├── utils/        # 汎用ユーティリティ関数
├── App.js        # アプリケーションのメインコンポーネント、ルーティング定義など
├── index.js      # アプリケーションのエントリーポイント
├── styles/       # グローバルなスタイルファイル (App.cssなど)
└── types/        # TypeScriptの場合の型定義 (JSプロジェクトでは不要だが考慮に入れる)
```

## 各ディレクトリのルールと説明

- **`src/assets/`**: アプリケーションで使用する画像、フォント、その他の静的ファイルを配置します。カテゴリ分けが必要な場合はサブディレクトリを作成します。
- **`src/components/`**: 再利用可能なUI部品を配置します。`common/` サブディレクトリにはアプリ全体で広く使われる汎用的な部品（ボタン、入力フィールド、モーダルなど）を、それ以外のサブディレクトリには特定のドメインや機能に関連する部品を配置します。コンポーネントのサイズや責務に応じてファイルを分割します（例: `Button/index.js`, `Button/Button.js`, `Button/Button.module.css`）。
- **`src/contexts/`**: `React.createContext` を使用して作成されたContextとそのプロバイダー、コンシューマーを配置します。
- **`src/hooks/`**: アプリケーション固有のロジックをカプセル化したカスタムフックを配置します。ファイル名は `use〇〇.js` とします。
- **`src/pages/`**: React Routerなどのルーティングによって表示される各ページに対応するコンポーネントを配置します。通常、ページごとにサブディレクトリを作成し、その中にページコンポーネント本体（`index.js` または `[PageName].js`）やそのページ固有のコンポーネント（`components/` サブディレクトリ内）を配置します。
- **`src/services/`**: APIクライアント（axiosのインスタンスやラッパー）、外部サービスとの連携ロジック、複雑なビジネスロジックなどを配置します。UIや状態管理から独立した、再利用可能なロジックを置く場所です。
- **`src/routes/`**: React Routerの`<Route>`定義などを集約するファイルを配置します（このディレクトリは必須ではなく、`App.js` や `pages/` ディレクトリ内でルーティングを定義することも一般的です）。
- **`src/utils/`**: アプリケーション全体で利用できる汎用的なヘルパー関数や定数などを配置します。フレームワークや特定の機能に依存しないコードを置きます。ファイル名は機能に応じて分かりやすく命名します。
- **`src/styles/`**: グローバルなCSSファイルやテーマ定義などを配置します。特定のコンポーネントに紐づくスタイルは、コンポーネント自身のディレクトリ内に配置することが推奨されます (CSS Modulesなどを使用)。
- **`src/types/`**: TypeScriptを使用する場合、アプリケーション全体や各モジュールで共通する型定義ファイルを配置します (例: `User.ts`, `ApiResponses.ts`)。JSプロジェクトでは通常不要です。

## コンポーネントの分割基準

- **再利用性**: 複数の場所で同じUIパターンが使われる場合は、`components/` に抽出する。
- **責務**: 単一責務の原則に基づき、一つのコンポーネントは一つのことだけを行うようにする。UI表示、データ取得、状態管理など、責務が異なる場合は分割を検討する。
- **サイズ**: ファイルが長くなりすぎる場合は、可読性向上のために内部コンポーネントを分割する。
- **状態**: 複雑なローカル状態を持つコンポーネントは、状態を持たないプレゼンテーションコンポーネントと分離することを検討する (Container/Presenterパターンなど)。

## ファイル名の命名規則

- **コンポーネント**: パスカルケース (`PascalCase`) を使用します (例: `Button.js`, `LoginPage.js`)。
- **カスタムフック**: `use` プレフィックスを付け、キャメルケース (`camelCase`) またはパスカルケースを使用します (例: `useFetchData.js`, `UseAuth.js`)。
- **ユーティリティ**: 機能に応じたキャメルケースやスネークケースなど、分かりやすい名前を使用します (例: `formatDate.js`, `apiClient.js`)。
- **ディレクトリ**: 関連するファイルをまとめる場合は、複数形や機能名に応じた分かりやすい名前を使用します (例: `components`, `utils`, `user`, `product`)。

## importのルール

- **絶対パスimport**: `src` ディレクトリをルートとする絶対パスでのimportを推奨します。これにより、ネストが深くなってもパスが簡潔になります。 (例: `import Button from 'components/common/Button';`)
  - 設定方法: `jsconfig.json` (JSの場合) または `tsconfig.json` (TSの場合) で `baseUrl` を設定します。
- **相対パスimport**: 同一ディレクトリ内や近い階層のファイル間のimportに使用します。

## 運用と補足

- このルールはあくまでガイドラインであり、プロジェクトの規模や特性に応じて柔軟に見直す可能性があります。
- 新しいディレクトリやパターンを導入する際は、チーム内で合意形成を図ることが重要です。
- TypeScriptの導入も考慮し、将来的な型の安全性向上を目指すことも検討してください。

---

このドキュメントが、今後のReact開発の一助となれば幸いです。 